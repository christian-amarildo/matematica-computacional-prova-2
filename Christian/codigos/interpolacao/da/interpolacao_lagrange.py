# Importa√ß√£o das bibliotecas necess√°rias
import numpy as np  # Biblioteca NumPy para manipula√ß√µes num√©ricas (especialmente arrays e fun√ß√µes matem√°ticas)
import matplotlib.pyplot as plt  # Biblioteca Matplotlib para criar gr√°ficos e visualiza√ß√µes

# Fun√ß√£o para calcular o valor interpolado usando o polin√¥mio de Lagrange
def interpLagrange(xp, x, y):
    """
    Calcula a interpola√ß√£o polinomial de Lagrange em um ponto espec√≠fico xp.

    O polin√¥mio de Lagrange √© usado para encontrar uma fun√ß√£o polinomial que passe
    por todos os pontos dados (x, y) e que possa ser avaliada em outros pontos.

    Par√¢metros:
    xp (float): Ponto espec√≠fico onde a interpola√ß√£o ser√° avaliada.
    x (list ou array): Lista de valores da vari√°vel independente (os x conhecidos).
    y (list ou array): Lista de valores da vari√°vel dependente (os f(x) conhecidos).

    Retorna:
    float: Valor interpolado em xp, que √© a avalia√ß√£o do polin√¥mio em xp.
    """
    yp = 0  # Inicializa a vari√°vel para armazenar o valor interpolado
    n = len(x)  # Obt√©m o n√∫mero de pontos conhecidos (quantidade de elementos em x)

    # Loop sobre cada termo do polin√¥mio de Lagrange
    for k in range(n):
        p = 1  # Inicializa o termo do polin√¥mio de Lagrange para o √≠ndice k
        for j in range(n):
            if k != j:
                # Calcula o termo de Lagrange, que √© um fator multiplicativo para cada k
                p *= (xp - x[j]) / (x[k] - x[j])  # (xp - x_j) / (x_k - x_j)
        
        # Soma o termo ponderado pelo valor correspondente de y[k]
        yp += p * y[k]  # Pondera o valor y[k] com o termo de Lagrange calculado para k

    return yp  # Retorna o valor interpolado

# Fun√ß√£o para construir a forma simb√≥lica do polin√¥mio de Lagrange
def calcular_polinomio_lagrange(x, y):
    """
    Constr√≥i o polin√¥mio interpolador de Lagrange em forma simb√≥lica.

    Essa fun√ß√£o cria uma representa√ß√£o simb√≥lica do polin√¥mio interpolador, o qual
    passa por todos os pontos fornecidos (x, y). O polin√¥mio √© uma soma de termos
    de Lagrange ponderados pelos valores de y.

    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (os x conhecidos).
    y (list ou array): Lista de valores da vari√°vel dependente (os f(x) conhecidos).

    Retorna:
    str: Representa√ß√£o formatada do polin√¥mio de Lagrange em formato string.
    """
    n = len(x)  # Obt√©m o n√∫mero de pontos (tamanho de x)
    termos = []  # Lista para armazenar cada termo do polin√¥mio

    # Loop sobre cada ponto k para calcular o termo correspondente do polin√¥mio de Lagrange
    for k in range(n):
        numerador = []  # Lista para armazenar os termos (x - x_j)
        denominador = 1  # Inicializa o denominador do termo de Lagrange

        # Loop para calcular os fatores (x - x_j) para o termo de Lagrange
        for j in range(n):
            if k != j:
                numerador.append(f"(x - {x[j]})")  # Adiciona o fator (x - x_j) ao numerador
                denominador *= (x[k] - x[j])  # Multiplica o denominador pela diferen√ßa (x_k - x_j)

        # Cria o termo simb√≥lico completo para o ponto k
        termo = f"{y[k]:.6f} * ({' * '.join(numerador)}) / {denominador:.6f}"
        termos.append(termo)  # Adiciona o termo √† lista

    # Retorna o polin√¥mio como uma string formatada com todos os termos
    return " + ".join(termos)

# Fun√ß√£o para gerar e plotar o gr√°fico da interpola√ß√£o polinomial de Lagrange
def plotar_interpolacao(x, y, xp, yp):
    """
    Plota a interpola√ß√£o polinomial de Lagrange junto com os pontos fornecidos.

    A fun√ß√£o gera um gr√°fico da fun√ß√£o interpoladora de Lagrange e destaca os pontos
    originais, bem como o ponto no qual a interpola√ß√£o foi realizada.

    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (os x conhecidos).
    y (list ou array): Lista de valores da vari√°vel dependente (os f(x) conhecidos).
    xp (float): Ponto espec√≠fico onde foi realizada a interpola√ß√£o (o ponto x no qual a interpola√ß√£o foi realizada).
    yp (float): Valor interpolado em xp, ou seja, f(xp), que foi calculado pela interpola√ß√£o.
    """
    # Gerando valores para a curva interpoladora, criando uma linha com mais pontos para visualiza√ß√£o suave
    t = np.linspace(min(x), max(x), len(x) + (len(x)-1)*3000)  # Gera uma sequ√™ncia de pontos entre o valor m√≠nimo e m√°ximo de x
    yt = [interpLagrange(i, x, y) for i in t]  # Calcula os valores interpolados para cada ponto de t usando interpLagrange

    # Criando o gr√°fico
    plt.figure(figsize=(8, 6))  # Configura o tamanho da figura
    plt.plot(t, yt, 'b-', label="Polin√¥mio de Lagrange")  # Plota a linha do polin√¥mio interpolador (em azul)
    plt.scatter(x, y, color='red', marker='o', s=100, label="Pontos Originais")  # Plota os pontos reais (em vermelho)
    plt.scatter(xp, yp, color='green', marker='x', s=150, label=f"Interpolado em x={xp}")  # Plota o ponto interpolado (em verde)

    plt.xlabel("x")  # R√≥tulo do eixo x
    plt.ylabel("f(x)")  # R√≥tulo do eixo y
    plt.title("Interpola√ß√£o Polinomial de Lagrange")  # T√≠tulo do gr√°fico
    plt.legend()  # Exibe a legenda
    plt.grid(True)  # Exibe a grade no gr√°fico
    plt.show()  # Exibe o gr√°fico gerado

# Fun√ß√£o para calcular o erro absoluto da interpola√ß√£o
def calcular_erro(x, y):
    """
    Calcula o erro absoluto entre os valores reais e os valores estimados pela interpola√ß√£o.

    A fun√ß√£o calcula a diferen√ßa absoluta entre o valor real f(x) e o valor estimado
    pela interpola√ß√£o de Lagrange em cada um dos pontos fornecidos.

    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (os x conhecidos).
    y (list ou array): Lista de valores da vari√°vel dependente (os f(x) conhecidos).

    Retorna:
    list: Lista de erros absolutos para cada ponto, ou seja, |f(x) real - f(x) estimado|
    """
    erros = []  # Lista para armazenar os erros
    estimados = []  # Lista para armazenar os valores estimados

    # Loop sobre cada ponto
    for i in range(len(x)):
        estimado = interpLagrange(x[i], x, y)  # Calcula o valor estimado de f(x) usando a interpola√ß√£o
        erro = abs(estimado - y[i])  # Calcula o erro absoluto entre o valor real e o estimado
        erros.append(erro)  # Adiciona o erro √† lista
        estimados.append(estimado)  # Adiciona o valor estimado √† lista

    return erros, estimados  # Retorna as listas de erros e estimados

# Fun√ß√£o para exibir os detalhes da interpola√ß√£o
def mostrar_detalhes(x, y, xp, yp, exibir_polinomio=False):
    """
    Exibe detalhes da interpola√ß√£o, mostrando os valores de x, y, erros e o polin√¥mio interpolador.

    A fun√ß√£o imprime uma tabela com os pontos reais, seus valores, os valores estimados
    pela interpola√ß√£o e os erros absolutos. Tamb√©m exibe o valor interpolado em xp.

    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (os x conhecidos).
    y (list ou array): Lista de valores da vari√°vel dependente (os f(x) conhecidos).
    xp (float): Ponto onde foi realizada a interpola√ß√£o (o ponto x no qual a interpola√ß√£o foi realizada).
    yp (float): Valor interpolado em xp, ou seja, f(xp), que foi calculado pela interpola√ß√£o.
    exibir_polinomio (bool): Se True, exibe a representa√ß√£o simb√≥lica do polin√¥mio de Lagrange.
    """
    erros, estimados = calcular_erro(x, y)  # Calcula os erros

    print("\n=== Detalhes da Interpola√ß√£o ===")
    print("Pontos conhecidos:")
    for i in range(len(x)):
        print(f"x = {x[i]:.6f} | f(x) real = {y[i]:.6f} | f(x) estimado = {estimados[i]:.6f} | Erro = {erros[i]:.6e}")
    
    print(f"\nInterpola√ß√£o realizada em x = {xp:.6f}")
    print(f"Valor interpolado: f({xp:.6f}) = {yp:.6f}")

    if exibir_polinomio:
        polinomio = calcular_polinomio_lagrange(x, y)  # Gera a representa√ß√£o simb√≥lica do polin√¥mio de Lagrange
        print("\n=== Polin√¥mio Interpolador de Lagrange ===")
        print(f"P(x) = {polinomio}")  # Exibe o polin√¥mio

# === TESTE R√ÅPIDO: BASTA ALTERAR ESTES VALORES ===
# Aqui voc√™ pode modificar os pontos conhecidos e o ponto a ser interpolado

x_pontos = [-1, 0, 1, 2, 3]  # Modifique aqui os valores de x (os pontos conhecidos)
y_pontos = [0, 1, -1, 2, 7]  # Modifique aqui os valores de f(x) (os valores correspondentes de y)
xp_teste = 1.5  # Modifique aqui o ponto em que deseja interpolar (xp)
exibir_grafico = True  # Escolha se deseja ver o gr√°fico (True ou False)
exibir_polinomio = True  # Escolha se deseja ver o polin√¥mio (True ou False)

# Testando a interpola√ß√£o em xp_teste
yp_teste = interpLagrange(xp_teste, x_pontos, y_pontos)

# Exibindo detalhes da interpola√ß√£o, erros e valor interpolado
mostrar_detalhes(x_pontos, y_pontos, xp_teste, yp_teste, exibir_polinomio)

# Gerando o gr√°fico (se o usu√°rio quiser)
if exibir_grafico:
    plotar_interpolacao(x_pontos, y_pontos, xp_teste, yp_teste)








  
# Explica√ß√£o:
# Interpola√ß√£o de Lagrange: O c√≥digo implementa a t√©cnica de interpola√ß√£o polinomial de Lagrange. Esta t√©cnica constr√≥i um polin√¥mio de grau 
# ùëõ
# ‚àí
# 1
# n‚àí1 que passa por todos os pontos fornecidos 
# (
# ùë•
# 1
# ,
# ùë¶
# 1
# )
# ,
# (
# ùë•
# 2
# ,
# ùë¶
# 2
# )
# ,
# ‚Ä¶
# (x 
# 1
# ‚Äã
#  ,y 
# 1
# ‚Äã
#  ),(x 
# 2
# ‚Äã
#  ,y 
# 2
# ‚Äã
#  ),‚Ä¶. O polin√¥mio resultante √© usado para estimar valores de 
# ùëì
# (
# ùë•
# )
# f(x) em pontos intermedi√°rios.

# Fun√ß√µes:

# interpLagrange: Calcula o valor do polin√¥mio interpolador de Lagrange em um ponto 
# ùë•
# ùëù
# x 
# p
# ‚Äã
#  .
# calcular_polinomio_lagrange: Gera uma representa√ß√£o simb√≥lica do polin√¥mio interpolador.
# plotar_interpolacao: Gera um gr√°fico que mostra os pontos originais e o polin√¥mio interpolador.
# calcular_erro: Calcula o erro absoluto entre os valores reais e os valores estimados pela interpola√ß√£o.
# mostrar_detalhes: Exibe detalhes sobre a interpola√ß√£o, incluindo erros, valores estimados e o polin√¥mio simb√≥lico (se solicitado).
# Uso:

# Voc√™ pode modificar a lista x_pontos para os pontos 
# ùë•
# x conhecidos, e a lista y_pontos para os valores de 
# ùëì
# (
# ùë•
# )
# f(x) correspondentes.
# Defina xp_teste para o ponto onde voc√™ quer avaliar o polin√¥mio.
# Controle se deseja gerar o gr√°fico e ver o polin√¥mio definindo exibir_grafico e exibir_polinomio.

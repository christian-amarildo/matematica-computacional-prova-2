# Importa√ß√£o das bibliotecas necess√°rias
import pandas as pd  # Pandas para criar e manipular tabelas, especialmente a tabela de diferen√ßas divididas.
import numpy as np  # NumPy para manipula√ß√µes matem√°ticas e gera√ß√£o de valores cont√≠nuos (como o intervalo para o gr√°fico).
import matplotlib.pyplot as plt  # Matplotlib para plotar gr√°ficos e visualizar a interpola√ß√£o.

def interpolacao_newton(x, y, x_interpolado):
    """
    Fun√ß√£o para calcular a interpola√ß√£o polinomial de Newton.

    O m√©todo de interpola√ß√£o de Newton √© uma forma de obter um polin√¥mio de grau 
    n-1 que passa por todos os pontos (x_i, y_i) fornecidos. A principal vantagem 
    deste m√©todo √© que o polin√¥mio pode ser facilmente atualizado se novos pontos 
    forem adicionados.

    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente, os pontos de x nos quais a fun√ß√£o f(x) √© conhecida.
    y (list ou array): Lista de valores da vari√°vel dependente, os valores de f(x) para cada ponto de x.
    x_interpolado (float): O valor de x no qual a interpola√ß√£o ser√° realizada, ou seja, o ponto onde queremos estimar f(x).

    Retorna:
    float: O valor interpolado f(x_interpolado), ou seja, a avalia√ß√£o do polin√¥mio em x_interpolado.
    list: A tabela de diferen√ßas divididas, que mostra como o polin√¥mio de Newton √© calculado passo a passo.
    list: Os coeficientes do polin√¥mio de Newton, ou seja, os valores Œî^i f (diferen√ßas divididas).
    """
    n = len(x)  # N√∫mero de pontos fornecidos (quantidade de elementos em x e y)
    
    # Inicializa a tabela de diferen√ßas divididas com None. Cada c√©lula tabela[i][j] 
    # ir√° armazenar a j-√©sima diferen√ßa dividida dos primeiros i pontos.
    tabela_diferencas = [[None for _ in range(n)] for _ in range(n)]  

    # Preenche a primeira coluna da tabela de diferen√ßas com os valores de y,
    # j√° que a primeira diferen√ßa dividida √© apenas f(x_i) (os valores originais de y).
    for i in range(n):
        tabela_diferencas[i][0] = y[i]

    # Calcula as diferen√ßas divididas. Cada c√©lula tabela[i][j] √© calculada pela f√≥rmula:
    # Œî^j f(x_i) = (Œî^(j-1) f(x_{i+1}) - Œî^(j-1) f(x_i)) / (x_{i+j} - x_i)
    for j in range(1, n):  # Come√ßando a calcular as diferen√ßas divididas a partir da segunda coluna
        for i in range(n - j):  # Calcula para cada linha i at√© o final
            tabela_diferencas[i][j] = (tabela_diferencas[i + 1][j - 1] - tabela_diferencas[i][j - 1]) / (x[i + j] - x[i])

    # Extraindo os coeficientes do polin√¥mio de Newton, que s√£o as diferen√ßas divididas da primeira linha
    coeficientes = [tabela_diferencas[0][j] for j in range(n)]  # Extra√≠mos os coeficientes Œî^i f

    # Avalia√ß√£o do polin√¥mio de Newton em x_interpolado
    # O polin√¥mio de Newton √© avaliado como:
    # P(x) = Œ£(Œî^i f(x_0) * Œ†(x - x_j)), para i = 0 at√© n-1
    termo_x = 1  # Termo que ir√° armazenar o produto (x - x_j) √† medida que percorremos o polin√¥mio
    resultado_interpolado = coeficientes[0]  # Come√ßamos com o primeiro coeficiente (Œî^0 f)

    # A f√≥rmula recursiva do polin√¥mio de Newton para cada grau do polin√¥mio
    for ordem in range(1, n):  # Iterando pelos termos do polin√¥mio de grau 1 at√© n-1
        termo_x *= (x_interpolado - x[ordem - 1])  # Multiplica o termo (x - x_j)
        resultado_interpolado += coeficientes[ordem] * termo_x  # Adiciona o termo ao resultado

    # Retorna o valor interpolado, a tabela de diferen√ßas divididas e os coeficientes
    return resultado_interpolado, tabela_diferencas, coeficientes

def exibir_tabela_diferencas(x, tabela_diferencas):
    """
    Exibe a tabela de diferen√ßas divididas em formato tabular utilizando o Pandas.

    Esta tabela √© √∫til para entender como o polin√¥mio de Newton foi constru√≠do,
    e como as diferen√ßas divididas s√£o calculadas.

    Par√¢metros:
    x (list ou array): Lista de valores de x (pontos conhecidos).
    tabela_diferencas (list): A tabela de diferen√ßas divididas gerada pela interpola√ß√£o de Newton.
    """
    # Cria um DataFrame (tabela) do Pandas, onde cada coluna corresponde a uma diferen√ßa dividida (Œî^i f).
    df = pd.DataFrame(tabela_diferencas, columns=[f"Œî^{i}f" for i in range(len(x))])
    
    # Adiciona uma coluna "x" na tabela para mostrar os valores de x associados a cada linha
    df.insert(0, "x", x + ["" for _ in range(len(x) - len(df))])  # Preenche com "" quando os tamanhos n√£o coincidem

    # Exibe a tabela de diferen√ßas divididas de forma leg√≠vel
    print("\n=== Tabela de Diferen√ßas Divididas ===")
    print(df.fillna(''))  # Preenche valores faltantes com strings vazias para melhor leitura

def exibir_polinomio(coeficientes, x):
    """
    Exibe o polin√¥mio interpolador de Newton de forma formatada.

    Esta fun√ß√£o gera uma string que representa o polin√¥mio de Newton em termos de seus coeficientes 
    e as vari√°veis x. Essa forma √© √∫til para ver como o polin√¥mio √© estruturado.

    Par√¢metros:
    coeficientes (list): Lista de coeficientes do polin√¥mio de Newton (Œî^i f).
    x (list): Lista de valores de x usados na interpola√ß√£o.
    """
    termos = [f"{coeficientes[0]:.6f}"]  # Adiciona o primeiro coeficiente (Œî^0 f)

    # Para cada coeficiente adicional, adicionamos um termo ao polin√¥mio
    for i in range(1, len(coeficientes)):
        termo = f"{coeficientes[i]:.6f}"  # Coeficiente atual
        for j in range(i):  # Multiplica por (x - x_j) para cada j
            termo += f"*(x - {x[j]})"
        termos.append(termo)  # Adiciona o termo completo ao polin√¥mio

    # Exibe o polin√¥mio completo
    print("\n=== Polin√¥mio Interpolador ===")
    print("P(x) =", " + ".join(termos))  # Exibe o polin√¥mio formatado

def plotar_interpolacao(x, y, x_interpolado, y_interpolado):
    """
    Plota a interpola√ß√£o polinomial de Newton juntamente com os pontos fornecidos.

    Par√¢metros:
    x (list ou array): Lista de valores de x (pontos conhecidos).
    y (list ou array): Lista de valores de f(x) para os pontos conhecidos.
    x_interpolado (float): Ponto onde o valor da interpola√ß√£o foi calculado.
    y_interpolado (float): O valor da interpola√ß√£o em x_interpolado.
    """
    # Gera valores cont√≠nuos para o intervalo de x, que s√£o usados para desenhar o gr√°fico da curva
    intervalo_x = np.linspace(min(x) - 1, max(x) + 1, 100)  # Gera 100 pontos entre o m√≠nimo e m√°ximo de x
    intervalo_y = [interpolacao_newton(x, y, i)[0] for i in intervalo_x]  # Calcula os valores de y para cada ponto

    # Cria o gr√°fico
    plt.figure(figsize=(8, 6))  # Configura o tamanho do gr√°fico
    plt.plot(intervalo_x, intervalo_y, 'b-', label="Polin√¥mio de Newton")  # Plota a linha do polin√¥mio interpolador
    plt.scatter(x, y, color='red', marker='o', s=100, label="Pontos Originais")  # Plota os pontos originais (em vermelho)
    plt.scatter(x_interpolado, y_interpolado, color='green', marker='x', s=150, label=f"Interpolado em x={x_interpolado}")  # Plota o ponto interpolado (em verde)

    # Adiciona r√≥tulos e t√≠tulo ao gr√°fico
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title("Interpola√ß√£o Polinomial de Newton")
    plt.legend()  # Exibe a legenda
    plt.grid(True)  # Adiciona a grade ao gr√°fico
    plt.show()  # Exibe o gr√°fico gerado

# === TESTE R√ÅPIDO: BASTA ALTERAR ESTES VALORES ===
x_pontos = [-1, 0, 2, 3]  # Modifique os valores de x aqui para os pontos conhecidos
y_pontos = [4, 1, -1, 2]  # Modifique os valores de f(x) para cada ponto de x
x_interpolacao = 1.5  # Modifique o valor de x para o ponto em que deseja interpolar

# Flags para controlar o que ser√° exibido
exibir_grafico = True  # Se True, o gr√°fico da interpola√ß√£o ser√° exibido
exibir_tabela = True   # Se True, a tabela de diferen√ßas divididas ser√° exibida
exibir_coeficientes = True  # Se True, os coeficientes do polin√¥mio de Newton ser√£o exibidos
exibir_polinomio_completo = True  # Se True, o polin√¥mio completo ser√° exibido

# Testando a interpola√ß√£o de Newton com os valores fornecidos
y_interpolacao, tabela_diferencas, coeficientes = interpolacao_newton(x_pontos, y_pontos, x_interpolacao)

# Exibindo o resultado da interpola√ß√£o
print(f"\nInterpola√ß√£o realizada em x = {x_interpolacao:.6f}")
print(f"Valor interpolado: f({x_interpolacao:.6f}) = {y_interpolacao:.6f}")

# Exibir tabela de diferen√ßas divididas, coeficientes e o polin√¥mio, se solicitado
if exibir_tabela:
    exibir_tabela_diferencas(x_pontos, tabela_diferencas)

if exibir_coeficientes:
    print("\n=== Coeficientes do Polin√¥mio ===")
    for i, coef in enumerate(coeficientes):
        print(f"Coeficiente Œî^{i}f: {coef:.6f}")

if exibir_polinomio_completo:
    exibir_polinomio(coeficientes, x_pontos)

# Gerar o gr√°fico da interpola√ß√£o, se solicitado
if exibir_grafico:
    plotar_interpolacao(x_pontos, y_pontos, x_interpolacao, y_interpolacao)
O que este c√≥digo faz:
Interpola√ß√£o de Newton: Cria um polin√¥mio de grau 
ùëõ
‚àí
1
n‚àí1 (onde 
ùëõ
n √© o n√∫mero de pontos dados) que passa por todos os pontos fornecidos. O polin√¥mio de Newton √© gerado atrav√©s das diferen√ßas divididas, uma t√©cnica iterativa que facilita o c√°lculo e a atualiza√ß√£o do polin√¥mio quando novos pontos s√£o adicionados.
Fun√ß√µes:
interpolacao_newton: Calcula o valor interpolado no ponto desejado, calcula as diferen√ßas divididas e os coeficientes do polin√¥mio.
exibir_tabela_diferencas: Exibe a tabela de diferen√ßas divididas para entender como o polin√¥mio foi calculado.
exibir_polinomio: Exibe o polin√¥mio interpolador completo de forma leg√≠vel.
plotar_interpolacao: Gera um gr√°fico que mostra os pontos fornecidos, a curva interpoladora e o ponto interpolado.
Modifica√ß√µes:
Alterar os pontos de 
ùë•
x e 
ùë¶
y: Modifique as listas x_pontos e y_pontos para os dados de entrada do seu problema.
Alterar o ponto de interpola√ß√£o: Modifique a vari√°vel x_interpolacao para o ponto onde deseja estimar o valor da fun√ß√£o.
Exibir gr√°ficos/tabelas/polin√¥mios: As vari√°veis exibir_grafico, exibir_tabela, exibir_coeficientes e exibir_polinomio_completo controlam o que ser√° exibido ao usu√°rio.

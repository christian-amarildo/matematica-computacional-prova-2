import numpy as np  # Importa a biblioteca NumPy para manipula√ß√µes num√©ricas
import matplotlib.pyplot as plt  # Importa a biblioteca matplotlib para gerar gr√°ficos
from resolver_sistema_linear import resolver_sistema_linear  # Importa a fun√ß√£o que resolve sistemas lineares (j√° implementada em outro arquivo)

# Fun√ß√£o para construir a matriz de Vandermonde associada a um conjunto de pontos (x, y)
def sistema_vandermonde(x, y):
    """
    Constr√≥i a matriz de Vandermonde associada a um conjunto de pontos (x, y).
    A matriz de Vandermonde √© usada para resolver sistemas lineares que surgem na interpola√ß√£o polinomial.
    
    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (x1, x2, ..., xn).
    y (list ou array): Lista de valores da vari√°vel dependente (y1, y2, ..., yn), correspondentes a cada valor de x.
    
    Retorna:
    tuple: (A, b), onde:
      - A √© a matriz de Vandermonde (de dimens√£o n x n)
      - b √© o vetor de resultados (vetor de valores y)
    """
    n = len(x)  # Obt√©m o n√∫mero de pontos fornecidos
    A = np.vander(x, increasing=True)  # Constr√≥i a matriz de Vandermonde. np.vander gera uma matriz com as pot√™ncias de x, do menor grau para o maior
    return A, np.array(y)  # Retorna a matriz A e o vetor b com os valores de y

# Fun√ß√£o para verificar se a solu√ß√£o do sistema satisfaz as equa√ß√µes originais
def verificar_solucao(x, fx, coeficientes, exibir_detalhes=False):
    """
    Verifica se os coeficientes encontrados satisfazem as equa√ß√µes do sistema original.
    Para isso, avalia o polin√¥mio interpolador nos pontos dados e calcula os erros.

    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (x1, x2, ..., xn).
    fx (list ou array): Lista de valores da vari√°vel dependente (y1, y2, ..., yn).
    coeficientes (np.array): Coeficientes do polin√¥mio interpolador encontrados pela solu√ß√£o do sistema.
    exibir_detalhes (bool): Se True, exibe detalhes da compara√ß√£o entre o valor real de f(x) e o valor estimado pelo polin√¥mio.
    
    Retorna:
    bool: Retorna True se a solu√ß√£o for v√°lida (os erros s√£o suficientemente pequenos), False caso contr√°rio.
    """
    # Estima os valores de f(x) usando os coeficientes do polin√¥mio para cada valor de x
    estimados = [sum(coef * (xi ** i) for i, coef in enumerate(coeficientes)) for xi in x]
    
    # Calcula o erro absoluto entre os valores reais de f(x) e os valores estimados pelo polin√¥mio
    erros = np.abs(np.array(estimados) - np.array(fx))

    # Se exibir_detalhes for True, exibe o polin√¥mio e a compara√ß√£o dos valores reais e estimados
    if exibir_detalhes:
        print("\n=== Verifica√ß√£o da Solu√ß√£o ===")
        print("Polin√¥mio encontrado:")
        
        # Exibe o polin√¥mio interpolador com os coeficientes calculados
        termos = [f"{coef:.6f} * x^{i}" for i, coef in enumerate(coeficientes)]
        print("P(x) =", " + ".join(termos))
        
        # Exibe a compara√ß√£o dos valores reais de f(x) com os valores estimados e o erro
        print("\nCompara√ß√£o dos pontos:")
        for xi, yi, yi_est, erro in zip(x, fx, estimados, erros):
            print(f"x = {xi:.6f} | f(x) real = {yi:.6f} | f(x) estimado = {yi_est:.6f} | Erro = {erro:.6e}")

    # Se todos os erros forem menores que 1e-6, considera a solu√ß√£o v√°lida
    return np.all(erros < 1e-6)

# Fun√ß√£o principal para resolver o sistema linear e encontrar os coeficientes do polin√¥mio interpolador
def resolver_sistema(x, fx, exibir_detalhes=False):
    """
    Resolve o sistema linear Ax = b para encontrar os coeficientes do polin√¥mio interpolador.
    
    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (x1, x2, ..., xn).
    fx (list ou array): Lista de valores da vari√°vel dependente (y1, y2, ..., yn).
    exibir_detalhes (bool): Se True, exibe detalhes da verifica√ß√£o da solu√ß√£o.

    Retorna:
    dict: Dicion√°rio contendo as informa√ß√µes do processo:
      - "Matriz A": Matriz de Vandermonde
      - "Vetor b": Vetor b com os valores de fx
      - "Coeficientes": Coeficientes do polin√¥mio interpolador
      - "Solu√ß√£o V√°lida": Resultado do teste de valida√ß√£o (True/False)
    """
    # Constr√≥i a matriz A de Vandermonde e o vetor b com os valores de fx
    A, b = sistema_vandermonde(x, fx)
    
    # Resolve o sistema linear Ax = b usando uma fun√ß√£o externa (que voc√™ deve implementar ou importar)
    coeficientes = resolver_sistema_linear(A, b)
    
    # Verifica se a solu√ß√£o encontrada √© v√°lida (os erros est√£o dentro de uma margem aceit√°vel)
    solucao_valida = verificar_solucao(x, fx, coeficientes, exibir_detalhes)

    # Retorna as informa√ß√µes relevantes como um dicion√°rio
    return {
        "Matriz A": A,
        "Vetor b": b,
        "Coeficientes": coeficientes,
        "Solu√ß√£o V√°lida": solucao_valida
    }

# Fun√ß√£o para expandir uma lista de valores num√©ricos, inserindo valores intermedi√°rios igualmente espa√ßados
def expandir_lista(lista, num_novos):
    """
    Expande uma lista de valores adicionando pontos igualmente espa√ßados entre os valores originais.
    
    Par√¢metros:
    lista (list ou array): Lista de valores num√©ricos ordenados.
    num_novos (int): N√∫mero de novos valores a serem inseridos entre cada par de valores da lista original.
    
    Retorna:
    list: Nova lista com os valores originais e os novos valores interpolados.
    """
    if len(lista) < 2 or num_novos < 1:
        return lista  # Retorna a lista original se houver menos de dois elementos ou se num_novos for inv√°lido
    
    nova_lista = []  # Inicializa a nova lista com os pontos originais
    
    # Para cada par de valores consecutivos na lista original
    for i in range(len(lista) - 1):
        nova_lista.append(lista[i])  # Adiciona o primeiro valor
        novos_pontos = np.linspace(lista[i], lista[i+1], num_novos + 2)[1:-1]  # Cria pontos igualmente espa√ßados entre os valores originais
        nova_lista.extend(novos_pontos)  # Adiciona os novos pontos na lista
    
    nova_lista.append(lista[-1])  # Adiciona o √∫ltimo valor original
    return nova_lista

# Fun√ß√£o para plotar o gr√°fico do polin√¥mio interpolador junto com os pontos originais
def plotar_polinomio(x, fx, coeficientes, num_pontos=100):
    """
    Plota o polin√¥mio interpolador junto com os pontos fornecidos.
    
    Par√¢metros:
    x (list ou array): Lista de valores da vari√°vel independente (x1, x2, ..., xn).
    fx (list ou array): Lista de valores da vari√°vel dependente (y1, y2, ..., yn).
    coeficientes (np.array): Coeficientes do polin√¥mio interpolador.
    num_pontos (int): N√∫mero de pontos para a curva interpolada. (Quanto maior, mais suave ser√° o gr√°fico)
    """
    # Expande a lista de x para ter mais pontos entre os valores originais
    x_range = expandir_lista(x, num_pontos)
    
    # Calcula os valores do polin√¥mio nos pontos expandidos
    y_range = [sum(coef * (xi ** i) for i, coef in enumerate(coeficientes)) for xi in x_range]
    
    # Cria o gr√°fico
    plt.figure(figsize=(8, 6))  # Define o tamanho da figura
    plt.plot(x_range, y_range, color='darkblue', label="Polin√¥mio Interpolador")  # Plota o polin√¥mio interpolador
    plt.scatter(x, fx, color='red', marker='o', label="Pontos Originais (f(x))")  # Plota os pontos originais
    plt.xlabel("x")  # R√≥tulo do eixo x
    plt.ylabel("f(x)")  # R√≥tulo do eixo y
    plt.title("Interpola√ß√£o Polinomial")  # T√≠tulo do gr√°fico
    plt.legend()  # Exibe a legenda
    plt.grid(True)  # Exibe a grade no gr√°fico
    plt.show()  # Mostra o gr√°fico

# Exemplo de Testes
x_teste = [-1, 0, 1, 2]  # Exemplos de valores de x
fx_teste = [4, 1, -1, 7]  # Exemplos de valores correspondentes de f(x)

# Resolve o sistema para os valores de teste
resultado_teste = resolver_sistema(x_teste, fx_teste, exibir_detalhes=True)

# Plota o polin√¥mio interpolador com os pontos originais
plotar_polinomio(x_teste, fx_teste, resultado_teste["Coeficientes"])

# Exibe o resultado da solu√ß√£o (matriz A, vetor b, coeficientes e se a solu√ß√£o √© v√°lida)
print(resultado_teste)







# Explica√ß√£o Detalhada:
# 1. Fun√ß√£o sistema_vandermonde(x, y):
# O que faz: Constr√≥i a matriz de Vandermonde, que √© usada para resolver sistemas lineares durante a interpola√ß√£o polinomial. A matriz de Vandermonde tem a forma 
# ùê¥
# ùëñ
# ùëó
# =
# ùë•
# ùëñ
# ùëó
# ‚àí
# 1
# A 
# ij
# ‚Äã
#  =x 
# i
# j‚àí1
# ‚Äã
#  .
# Como usar: Voc√™ passa as listas de pontos 
# ùë•
# x e 
# ùë¶
# y. A fun√ß√£o retorna a matriz de Vandermonde 
# ùê¥
# A e o vetor 
# ùëè
# b com os valores de 
# ùë¶
# y.
# 2. Fun√ß√£o verificar_solucao(x, fx, coeficientes, exibir_detalhes=False):
# O que faz: Verifica se os coeficientes encontrados para o polin√¥mio satisfazem as equa√ß√µes do sistema original.
# Como usar: Passa as listas de 
# ùë•
# x e 
# ùëì
# (
# ùë•
# )
# f(x), al√©m dos coeficientes. Pode ativar ou desativar a exibi√ß√£o de detalhes (erro, polin√¥mio etc.).
# 3. Fun√ß√£o resolver_sistema(x, fx, exibir_detalhes=False):
# O que faz: Resolve o sistema linear usando a matriz de Vandermonde e retorna os coeficientes do polin√¥mio interpolador.
# Como usar: Passa os valores 
# ùë•
# x e 
# ùëì
# (
# ùë•
# )
# f(x) e obt√©m os coeficientes do polin√¥mio. Se quiser ver detalhes adicionais sobre a solu√ß√£o, pode ativar o par√¢metro exibir_detalhes=True.
# 4. Fun√ß√£o expandir_lista(lista, num_novos):
# O que faz: Expande uma lista de valores inserindo valores igualmente espa√ßados entre os valores originais.
# Como usar: Caso queira um gr√°fico mais suave, pode expandir os valores de 
# ùë•
# x com mais pontos, usando expandir_lista.
# 5. Fun√ß√£o plotar_polinomio(x, fx, coeficientes, num_pontos=100):
# O que faz: Plota o gr√°fico do polin√¥mio interpolador junto com os pontos dados.
# Como usar: Fornece os pontos 
# ùë•
# x e 
# ùëì
# (
# ùë•
# )
# f(x), os coeficientes do polin√¥mio e o n√∫mero de pontos a mais para o gr√°fico (quanto maior o n√∫mero, mais suave o gr√°fico).
# 6. Testes:
# S√£o realizados testes para verificar se as fun√ß√µes est√£o funcionando corretamente, com a impress√£o do resultado dos coeficientes e do gr√°fico gerado.

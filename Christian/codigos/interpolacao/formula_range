import numpy as np
import matplotlib.pyplot as plt

def runge_kutta(f, y0, t0, tf, h, metodo='4'):
    """
    Método de Runge-Kutta de ordem 4 (ou 2, dependendo da escolha) para resolver EDOs.
    
    :param f: Função que representa a equação diferencial (dy/dt = f(t, y)).
    :param y0: Condição inicial para y no tempo t0.
    :param t0: Valor inicial de t.
    :param tf: Valor final de t.
    :param h: Passo de integração.
    :param metodo: Define o método de Runge-Kutta. '4' para ordem 4, '2' para ordem 2.
    :return: Arrays de t e y que representam a solução da EDO.
    """
    t_values = np.arange(t0, tf, h)
    y_values = np.zeros(len(t_values))
    y_values[0] = y0

    for i in range(1, len(t_values)):
        t = t_values[i - 1]
        y = y_values[i - 1]

        if metodo == '4':  # Runge-Kutta de 4ª ordem
            k1 = h * f(t, y)
            k2 = h * f(t + h / 2, y + k1 / 2)
            k3 = h * f(t + h / 2, y + k2 / 2)
            k4 = h * f(t + h, y + k3)

            y_values[i] = y + (k1 + 2 * k2 + 2 * k3 + k4) / 6
        elif metodo == '2':  # Runge-Kutta de 2ª ordem (Método de Heun)
            k1 = h * f(t, y)
            k2 = h * f(t + h, y + k1)

            y_values[i] = y + (k1 + k2) / 2
        else:
            raise ValueError("Método inválido. Escolha '4' para RK4 ou '2' para RK2.")

    return t_values, y_values

def obter_entrada():
    """
    Função para obter a entrada do usuário para os parâmetros da equação diferencial.
    """
    try:
        print("Método de Runge-Kutta para resolução de EDOs.")
        f_str = input("Digite a equação diferencial f(t, y) (exemplo: t * y - y**2): ")
        f = lambda t, y: eval(f_str)

        y0 = float(input("Digite a condição inicial y0: "))
        t0 = float(input("Digite o valor inicial t0: "))
        tf = float(input("Digite o valor final tf: "))
        h = float(input("Digite o passo h (quanto menor, mais preciso): "))
        metodo = input("Escolha o método de Runge-Kutta (2 para RK2, 4 para RK4): ")

        return f, y0, t0, tf, h, metodo
    except Exception as e:
        print(f"Erro na entrada de dados: {e}")
        return None

def tentar_solucao():
    """
    Função que tenta calcular a solução da EDO usando o método de Runge-Kutta e trata erros.
    """
    dados_entrada = obter_entrada()
    if dados_entrada is None:
        print("Tentativa falhou. Por favor, tente novamente com valores válidos.")
        return
    
    f, y0, t0, tf, h, metodo = dados_entrada

    # Tentativas de resolver
    try:
        t_values, y_values = runge_kutta(f, y0, t0, tf, h, metodo)
        
        print(f"Solução aproximada para y(t) entre {t0} e {tf}:")
        for t, y in zip(t_values, y_values):
            print(f"t = {t:.2f}, y = {y:.6f}")

        # Visualizar o gráfico da solução
        plt.plot(t_values, y_values, label="Solução aproximada")
        plt.xlabel('t')
        plt.ylabel('y(t)')
        plt.title(f"Solução da EDO usando Runge-Kutta de ordem {metodo}")
        plt.legend()
        plt.grid(True)
        plt.show()
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        print("Não foi possível resolver o problema com este método.")

# Tentativas automáticas com limite de tentativas
tentativas_maximas = 5
tentativas = 0

while tentativas < tentativas_maximas:
    print(f"\nTentativa {tentativas + 1} de {tentativas_maximas}...")
    tentar_solucao()
    tentativas += 1
    resposta = input("Deseja tentar novamente? (s/n): ")
    if resposta.lower() != 's':
        print("Saindo...")
        break

if tentativas == tentativas_maximas:
    print("Limite de tentativas atingido. Não foi possível resolver o problema com esse método.")

import numpy as np
import matplotlib.pyplot as plt

def ajuste_minimos_quadrados(x, y, grau):
    """
    Realiza o ajuste de um polinômio de determinado grau a um conjunto de dados usando mínimos quadrados.
    
    Parâmetros:
    x (list/array): Valores x dos dados observados
    y (list/array): Valores y dos dados observados
    grau (int): Grau do polinômio a ser ajustado
    
    Retorna:
    coeficientes (array): Coeficientes do polinômio ajustado [a0, a1, ..., an]
    mse (float): Erro quadrático médio do ajuste
    """
    
    try:
        # Conversão para arrays numpy e validação de tipos
        x = np.array(x, dtype=float)
        y = np.array(y, dtype=float)
    except:
        raise ValueError("Valores inválidos em x ou y. Certifique-se que são todos numéricos.")
    
    # Validação básica dos dados
    if x.ndim != 1 or y.ndim != 1:
        raise ValueError("x e y devem ser vetores unidimensionais")
    if len(x) != len(y):
        raise ValueError("x e y devem ter o mesmo número de elementos")
    if not isinstance(grau, int) or grau < 0:
        raise ValueError("O grau deve ser um inteiro não negativo")
    if len(x) < grau + 1:
        raise ValueError(f"Necessário mínimo de {grau+1} pontos para ajustar um polinômio de grau {grau}")
    
    try:
        # Construção da matriz de Vandermonde
        A = np.vander(x, grau + 1, increasing=True)
        
        # Resolução do sistema linear usando mínimos quadrados
        coeficientes, residuos, rank, _ = np.linalg.lstsq(A, y, rcond=None)
        
        # Verificação de problemas numéricos
        if rank < grau + 1:
            print(f"Aviso: A matriz do sistema é de posto deficiente (posto {rank} < {grau+1}).")
            print("O ajuste pode não ser único ou está superparametrizado.")
        
        # Cálculo do erro quadrático médio
        mse = np.mean((y - A @ coeficientes) ** 2)
        
    except Exception as e:
        print("Erro durante o cálculo dos coeficientes:")
        print(f"Tipo do erro: {type(e).__name__}")
        print(f"Mensagem: {str(e)}")
        raise
    
    try:
        # Plotagem dos resultados
        plt.figure(figsize=(10, 6))
        plt.scatter(x, y, color='red', label='Dados originais')
        
        # Geração de pontos para a curva ajustada
        x_ajuste = np.linspace(min(x), max(x), 500)
        A_ajuste = np.vander(x_ajuste, grau + 1, increasing=True)
        y_ajuste = A_ajuste @ coeficientes
        
        plt.plot(x_ajuste, y_ajuste, label=f'Ajuste polinomial (grau {grau})', color='blue')
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Ajuste de Curva por Mínimos Quadrados')
        plt.legend()
        plt.grid(True)
        plt.show()
        
    except Exception as e:
        print("Erro durante a plotagem do gráfico:")
        print(f"Tipo do erro: {type(e).__name__}")
        print(f"Mensagem: {str(e)}")
    
    return coeficientes, mse

# Exemplo de uso:
if __name__ == "__main__":
    # Dados de exemplo
    x_dados = [0, 1, 2, 3, 4, 5]
    y_dados = [2.1, 7.8, 13.5, 27.2, 40.9, 61.1]
    
    try:
        # Ajuste de polinômio de grau 2
        coeficientes, mse = ajuste_minimos_quadrados(x_dados, y_dados, 2)
        
        print("\nCoeficientes do polinômio ajustado:")
        for i, coef in enumerate(coeficientes):
            print(f"a{i} = {coef:.4f}")
        print(f"\nErro Quadrático Médio (MSE): {mse:.4f}")
        
    except Exception as e:
        print("\nNão foi possível completar o ajuste:")
        print(f"Motivo: {str(e)}")
        print("Sugestões de correção:")
        print("- Verifique a consistência dos dados de entrada")
        print("- Reduza o grau do polinômio")
        print("- Verifique valores ausentes ou inválidos nos dados")

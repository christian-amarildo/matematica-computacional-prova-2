import numpy as np
import matplotlib.pyplot as plt
from numbers import Number

def construir_matriz_vandermonde(x, funcoes):
    """
    Constr√≥i a matriz de projeto (Vandermonde) para o ajuste de m√≠nimos quadrados.
    
    Par√¢metros:
    x (numpy.ndarray): Vetor de entrada com os pontos x observados (1D, shape (n,))
    funcoes (list): Lista de fun√ß√µes base para criar a matriz. Cada fun√ß√£o deve aceitar um escalar e retornar um escalar.
    
    Retorna:
    numpy.ndarray: Matriz de Vandermonde (shape (n, m)) onde n √© o n√∫mero de pontos e m o n√∫mero de fun√ß√µes base
    
    Raises:
    TypeError: Se x n√£o for numpy array ou funcoes n√£o for lista
    ValueError: Se x estiver vazio ou funcoes vazia
    """
    # Valida√ß√£o de entradas
    if not isinstance(x, np.ndarray) or not isinstance(funcoes, list):
        raise TypeError("x deve ser numpy.ndarray e funcoes deve ser lista")
    if len(x) == 0 or len(funcoes) == 0:
        raise ValueError("x e funcoes n√£o podem estar vazios")
    
    n = len(x)
    m = len(funcoes)
    X = np.zeros((n, m))
    
    # Preenche cada coluna da matriz com a aplica√ß√£o das fun√ß√µes base nos pontos x
    for i in range(n):
        for j, f in enumerate(funcoes):
            try:
                X[i, j] = f(x[i])
            except Exception as e:
                raise ValueError(f"Fun√ß√£o base {j} inv√°lida para x={x[i]}: {e}")
    
    return X

def resolver_sistema_linear(A, b):
    """
    Resolve o sistema linear Ax = b usando elimina√ß√£o de Gauss com pivotamento parcial.
    
    Par√¢metros:
    A (numpy.ndarray): Matriz de coeficientes quadrada (shape (n,n))
    b (numpy.ndarray): Vetor de termos independentes (shape (n,))
    
    Retorna:
    numpy.ndarray: Vetor solu√ß√£o x (shape (n,))
    
    Raises:
    LinAlgError: Se a matriz for singular ou mal condicionada
    """
    # Valida√ß√£o de entradas
    A = np.asarray(A, dtype=float)
    b = np.asarray(b, dtype=float)
    if A.ndim != 2 or A.shape[0] != A.shape[1]:
        raise ValueError("A deve ser matriz quadrada")
    if A.shape[0] != b.shape[0]:
        raise ValueError("Dimens√µes de A e b incompat√≠veis")
    
    n = len(b)
    A = A.copy()
    b = b.copy()

    # Elimina√ß√£o de Gauss com pivotamento parcial
    for i in range(n):
        # Encontra a linha com maior valor absoluto na coluna atual
        max_row = np.argmax(np.abs(A[i:, i])) + i
        
        # Verifica se a matriz √© singular
        if np.isclose(A[max_row, i], 0):
            raise np.linalg.LinAlgError("Matriz singular - sistema sem solu√ß√£o √∫nica")
        
        # Troca linhas se necess√°rio
        if max_row != i:
            A[[i, max_row]] = A[[max_row, i]]
            b[[i, max_row]] = b[[max_row, i]]
        
        # Elimina√ß√£o para zerar elementos abaixo do piv√¥
        for j in range(i+1, n):
            fator = A[j, i] / A[i, i]
            A[j, i:] -= fator * A[i, i:]
            b[j] -= fator * b[i]

    # Substitui√ß√£o regressiva para encontrar a solu√ß√£o
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (b[i] - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]
    
    return x

def minimos_quadrados(x, y, funcoes):
    """
    Ajusta um modelo linear usando m√≠nimos quadrados ordin√°rios (OLS).
    
    Par√¢metros:
    x (numpy.ndarray): Vari√°vel independente (shape (n,))
    y (numpy.ndarray): Vari√°vel dependente (shape (n,))
    funcoes (list): Lista de fun√ß√µes base para o modelo
    
    Retorna:
    tuple: (coeficientes, funcao_ajustada) onde:
        - coeficientes (numpy.ndarray): Par√¢metros otimizados do modelo
        - funcao_ajustada (callable): Fun√ß√£o que aceita escalar e retorna predi√ß√£o
    
    Raises:
    ValueError: Se x e y tiverem tamanhos diferentes
    """
    # Valida√ß√£o de entradas
    if len(x) != len(y):
        raise ValueError("x e y devem ter o mesmo tamanho")
    
    # Construir matriz de projeto
    X = construir_matriz_vandermonde(x, funcoes)
    
    # Resolver sistema normal X^T X Œ≤ = X^T y
    XT = X.T
    try:
        coeficientes = resolver_sistema_linear(XT @ X, XT @ y)
    except np.linalg.LinAlgError as e:
        raise ValueError("Problema mal condicionado. Tente reduzir o n√∫mero de fun√ß√µes base") from e
    
    # Criar fun√ß√£o ajustada
    def funcao_ajustada(novo_x):
        return sum(c * f(novo_x) for c, f in zip(coeficientes, funcoes))
    
    return coeficientes, funcao_ajustada

def plot_ajuste(x, y, funcao_final, is_non_linear=False):
    """
    Gera plot comparando dados observados com curva ajustada.
    
    Par√¢metros:
    x (numpy.ndarray): Valores x observados
    y (numpy.ndarray): Valores y observados
    funcao_final (callable): Fun√ß√£o ajustada para predizer novos valores y
    is_non_linear (bool): Indica se foi usada transforma√ß√£o n√£o linear
    """
    # Criar grid suave para a curva ajustada
    x_min, x_max = np.min(x), np.max(x)
    x_plot = np.linspace(x_min - 0.5*(x_max-x_min), x_max + 0.5*(x_max-x_min), 200)
    
    # Calcular predi√ß√µes
    y_plot = funcao_final(x_plot)
    
    # Configurar plot
    plt.figure(figsize=(10, 6))
    plt.scatter(x, y, color='red', zorder=3, label='Dados Observados')
    plt.plot(x_plot, y_plot, 'b-', label='Modelo Ajustado')
    
    # Adicionar detalhes ao gr√°fico
    plt.title('Ajuste por M√≠nimos Quadrados\n', fontsize=14)
    plt.xlabel('Vari√°vel Independente (x)', fontsize=12)
    plt.ylabel('Vari√°vel Dependente (y)', fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend()
    
    # Adicionar texto informativo
    plt.text(0.05, 0.95, 
             f'Tipo de Ajuste: {"Exponencial" if is_non_linear else "Polinomial"}',
             transform=plt.gca().transAxes,
             verticalalignment='top',
             bbox=dict(boxstyle='round', alpha=0.2))
    
    plt.show()

def validar_entrada(valor, tipo, tamanho=None):
    """Valida entradas e converte para numpy array se necess√°rio"""
    if not isinstance(valor, np.ndarray):
        try:
            valor = np.asarray(valor, dtype=float)
        except:
            raise TypeError(f"Entrada deve ser convers√≠vel para numpy array, recebido {type(valor)}")
    
    if tamanho is not None and len(valor) != tamanho:
        raise ValueError(f"Tamanho incorreto. Esperado {tamanho}, recebido {len(valor)}")
    
    if np.any(np.isnan(valor)):
        raise ValueError("Entrada cont√©m valores NaN")
    
    return valor

# Interface principal do programa
if __name__ == "__main__":
    try:
        # üîÑ Dados de Entrada (Exemplo)
        x_obs = validar_entrada([1, 2, 3, 4, 5], 'x')
        y_obs = validar_entrada([2.718, 1.484, 0.738, 0.367, 0.135], 'y', len(x_obs))
        
        # üîÑ An√°lise Inicial dos Dados
        print("üîç An√°lise Explorat√≥ria Inicial:")
        print(f"N√∫mero de observa√ß√µes: {len(x_obs)}")
        print(f"Faixa de x: [{np.min(x_obs)}, {np.max(x_obs)}]")
        print(f"M√©dia de y: {np.mean(y_obs):.3f} ¬± {np.std(y_obs):.3f}")

        # üîÑ Determinar Tipo de Ajuste
        is_non_linear = True  # Determina se usar√° transforma√ß√£o exponencial
        
        if is_non_linear:
            # Verificar viabilidade da transforma√ß√£o
            if np.any(y_obs <= 0):
                raise ValueError("Dados n√£o-positivos impossibilitam transforma√ß√£o logar√≠tmica")
            
            print("\nüîç Transforma√ß√£o N√£o-Linear Aplicada:")
            print("Modelo original: y = exp(a + bx)")
            print("Transforma√ß√£o: ln(y) = a + bx")
            y_transformado = np.log(y_obs)
        else:
            y_transformado = y_obs.copy()

        # üîÑ Sele√ß√£o de Fun√ß√µes Base
        if is_non_linear:
            funcoes = [lambda x: 1, lambda x: x]  # Modelo linear na escala log
        else:
            funcoes = [lambda x: 1, lambda x: x, lambda x: x**2]  # Modelo quadr√°tico

        print("\nüîç Fun√ß√µes Base Selecionadas:")
        for i, f in enumerate(funcoes):
            print(f"Fun√ß√£o {i+1}: {f.__name__}")

        # üîÑ Ajuste do Modelo
        print("\n‚öôÔ∏è Executando Ajuste por M√≠nimos Quadrados...")
        coeficientes, modelo = minimos_quadrados(x_obs, y_transformado, funcoes)
        
        # üîÑ P√≥s-Processamento
        if is_non_linear:
            def modelo_final(x):
                return np.exp(modelo(x))  # Reverte transforma√ß√£o logar√≠tmica
        else:
            modelo_final = modelo

        # üîÑ An√°lise dos Resultados
        print("\nüìä Resultados do Ajuste:")
        print("Coeficientes estimados:")
        for i, c in enumerate(coeficientes):
            print(f"Œ≤{i}: {c:.5f}")
        
        # üîÑ Valida√ß√£o do Modelo
        y_pred = modelo_final(x_obs)
        residuos = y_obs - y_pred
        rss = np.sum(residuos**2)
        print(f"\nüìà M√©tricas de Qualidade:")
        print(f"Soma dos Quadrados dos Res√≠duos (RSS): {rss:.4f}")
        print(f"Erro M√©dio Absoluto (MAE): {np.mean(np.abs(residuos)):.4f}")

        # üîÑ Predi√ß√£o de Novos Valores
        novos_x = np.array([6, 7, 8])
        print("\nüîÆ Predi√ß√µes para Novos Valores:")
        for x in novos_x:
            print(f"x = {x}: y_previsto = {modelo_final(x):.4f}")

        # üîÑ Visualiza√ß√£o Gr√°fica
        print("\nüñ®Ô∏è Gerando visualiza√ß√£o gr√°fica...")
        plot_ajuste(x_obs, y_obs, modelo_final, is_non_linear)

    except Exception as e:
        print(f"\n‚ùå Erro na execu√ß√£o: {str(e)}")
        print("Verifique os dados de entrada e par√¢metros de configura√ß√£o")






#Fluxo do Programa:
#Entrada de Dados: Valida e converte os dados de entrada

#An√°lise Explorat√≥ria: Calcula estat√≠sticas b√°sicas

#Sele√ß√£o de Modelo: Escolhe entre linear e n√£o-linear

#Transforma√ß√£o de Dados: Aplica log se necess√°rio

#Ajuste do Modelo: Calcula coeficientes via m√≠nimos quadrados

#P√≥s-Processamento: Reverte transforma√ß√µes se aplic√°vel

#Avalia√ß√£o: Calcula m√©tricas de qualidade

#Predi√ß√£o: Gera previs√µes para novos valores

#Visualiza√ß√£o: Cria gr√°fico comparativo

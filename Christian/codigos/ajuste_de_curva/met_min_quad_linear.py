import numpy as np  # Importando o pacote numpy, utilizado para manipula√ß√£o de arrays e opera√ß√µes matem√°ticas
import matplotlib.pyplot as plt  # Importando a biblioteca para plotar gr√°ficos
from resolver_sistema import resolver_sistema_LU  # Importando uma fun√ß√£o externa para resolver sistemas lineares

# Definindo a classe MinimosQuadrados
class MinimosQuadrados:
    def __init__(self, x, y, funcoes_base):
        """
        Inicializa o modelo de m√≠nimos quadrados.

        Par√¢metros:
        x : np.array
            Vetor de valores da vari√°vel independente (os valores para os quais queremos estimar y).
        y : np.array
            Vetor de valores da vari√°vel dependente (valores observados para y, que queremos ajustar).
        funcoes_base : list
            Lista de fun√ß√µes base para ajuste. Essas fun√ß√µes representam os termos que ser√£o usados para aproximar o modelo.
            Cada fun√ß√£o base ser√° uma fun√ß√£o do tipo lambda, que recebe um valor de x e retorna um valor relacionado.

        A classe ir√° ajustar um modelo polinomial (ou outro tipo de modelo) que melhor se encaixa aos dados dados por x e y
        usando o m√©todo dos M√≠nimos Quadrados. O modelo ser√° constru√≠do a partir das fun√ß√µes base fornecidas.
        """
        self.x = x  # Armazena os valores da vari√°vel independente (x)
        self.y = y  # Armazena os valores da vari√°vel dependente (y)
        self.funcoes_base = funcoes_base  # Armazena as fun√ß√µes base para o ajuste
        self.coeficientes = self.ajustar()  # Chama a fun√ß√£o de ajuste para calcular os coeficientes

    def ajustar(self):
        """
        Realiza o ajuste pelo m√©todo dos m√≠nimos quadrados.
        
        O m√©todo dos m√≠nimos quadrados resolve um sistema linear para encontrar os coeficientes
        que minimizam a soma dos quadrados dos erros entre a predi√ß√£o do modelo e os dados reais.

        Retorna:
        coeficientes : np.array
            Os coeficientes ajustados que melhor se adaptam aos dados fornecidos.
        """
        n = len(self.x)  # N√∫mero de pontos de dados (tamanho do vetor x)
        m = len(self.funcoes_base)  # N√∫mero de fun√ß√µes base fornecidas

        # Matriz A que armazena os produtos das fun√ß√µes base para cada par (i,j)
        A = np.zeros((m, m))  # Inicializa uma matriz quadrada de tamanho m x m com zeros
        b = np.zeros(m)  # Inicializa um vetor coluna b de tamanho m com zeros

        # Preenchendo a matriz A e o vetor b, de acordo com a formula√ß√£o do m√©todo dos m√≠nimos quadrados
        for i in range(m):  # Para cada fun√ß√£o base i
            for j in range(m):  # Para cada fun√ß√£o base j
                # Calcula o somat√≥rio da multiplica√ß√£o das fun√ß√µes base i e j nos dados x
                A[i, j] = sum(self.funcoes_base[i](x_k) * self.funcoes_base[j](x_k) for x_k in self.x)
            # Preenche o vetor b com o somat√≥rio do produto entre y_k e a fun√ß√£o base i para cada valor de x_k
            b[i] = sum(y_k * self.funcoes_base[i](x_k) for x_k, y_k in zip(self.x, self.y))

        # Chama a fun√ß√£o resolver_sistema_LU (que provavelmente resolve um sistema linear usando decomposi√ß√£o LU)
        coeficientes = resolver_sistema_LU(A, b)
        return coeficientes  # Retorna os coeficientes ajustados

    def predicao(self, x_val):
        """
        Faz a previs√£o para um dado valor de x utilizando os coeficientes ajustados.

        Par√¢metros:
        x_val : float ou np.array
            Valor ou vetor de valores de entrada, para os quais queremos prever os valores de y.

        Retorno:
        float ou np.array
            Valor estimado de y correspondente a x_val.
        """
        # A predi√ß√£o √© dada pela soma ponderada das fun√ß√µes base avaliadas em x_val,
        # multiplicada pelos coeficientes ajustados
        return sum(c * f(x_val) for c, f in zip(self.coeficientes, self.funcoes_base))

    def plotar(self):
        """
        Plota os pontos experimentais e a curva ajustada pelo modelo de m√≠nimos quadrados.
        """
        # Gera um vetor de valores de x (x_fit) para plotar a curva ajustada
        x_fit = np.linspace(min(self.x), max(self.x), 100)  # Gera 100 pontos igualmente distribu√≠dos no intervalo de x
        # Calcula os valores de y correspondentes aos valores de x_fit usando a predi√ß√£o
        y_fit = self.predicao(x_fit)

        # Plota os pontos experimentais em vermelho
        plt.scatter(self.x, self.y, color='red', label='Pontos experimentais')
        # Plota a curva ajustada em azul
        plt.plot(x_fit, y_fit, color='blue', label='Curva ajustada')
        
        # Define r√≥tulos e t√≠tulo do gr√°fico
        plt.xlabel('X')  # R√≥tulo para o eixo X
        plt.ylabel('Y')  # R√≥tulo para o eixo Y
        plt.title('Ajuste por M√≠nimos Quadrados')  # T√≠tulo do gr√°fico
        plt.legend()  # Adiciona uma legenda ao gr√°fico
        plt.grid()  # Adiciona uma grade ao gr√°fico
        plt.show()  # Exibe o gr√°fico gerado

# Bloco principal para testar a classe e o m√©todo de ajuste
if __name__ == "__main__":
    # Exemplo de uso do c√≥digo:
    
    # Definindo os dados experimentais (x e y)
    x = np.array([-1, -0.75, -0.6, -0.5, -0.3, 0, 0.2, 0.4, 0.5, 0.7, 1])  # Valores de x (vari√°vel independente)
    y = np.array([2.05, 1.153, 0.45, 0.4, 0.5, 0, 0.2, 0.6, 0.512, 1.2, 2.05])  # Valores de y (vari√°vel dependente)
    
    # Definindo as fun√ß√µes base para o ajuste (aqui estamos usando seno, cosseno e um termo constante)
    funcoes_base = [
        lambda x: np.sin(x),  # Fun√ß√£o base 1: seno de x
        lambda x: np.cos(x),  # Fun√ß√£o base 2: cosseno de x
        lambda x: 1           # Fun√ß√£o base 3: termo constante (1)
    ]

    # Cria√ß√£o do modelo de m√≠nimos quadrados, passando os dados e as fun√ß√µes base
    modelo = MinimosQuadrados(x, y, funcoes_base)
    
    # Plotando os pontos experimentais e a curva ajustada
    modelo.plotar()

    # Exemplo de predi√ß√£o: prever o valor de y para um novo valor de x (por exemplo, x = 0.3)
    novo_x = 0.3  # Novo valor de x para o qual queremos fazer a predi√ß√£o
    pred_y = modelo.predicao(novo_x)  # Prediz o valor de y correspondente a novo_x
    print(f'Para x = {novo_x}, a predi√ß√£o de y √© {pred_y}')  # Exibe o valor de y estimado





    
# Coment√°rios detalhados sobre o c√≥digo:
# Importa√ß√µes e depend√™ncias:

# numpy √© usado para manipula√ß√£o de arrays e opera√ß√µes num√©ricas.
# matplotlib.pyplot √© utilizado para plotar gr√°ficos.
# resolver_sistema_LU √© uma fun√ß√£o externa que resolve sistemas lineares utilizando o m√©todo de decomposi√ß√£o LU.
# Classe MinimosQuadrados:

# Construtor __init__: Recebe os dados x, y e as fun√ß√µes base para o ajuste, e chama o m√©todo ajustar para calcular os coeficientes que melhor ajustam os dados.
# M√©todo ajustar: Constr√≥i a matriz 
# ùê¥
# A e o vetor 
# ùëè
# b necess√°rios para resolver o sistema linear, onde as solu√ß√µes s√£o os coeficientes que minimizam o erro quadr√°tico.
# M√©todo predicao: Recebe um valor de x_val e calcula o valor correspondente de y, utilizando os coeficientes ajustados e as fun√ß√µes base.
# M√©todo plotar: Plota os pontos experimentais e a curva ajustada.
# Como modificar o c√≥digo:

# Alterar fun√ß√µes base: Voc√™ pode alterar as fun√ß√µes que est√£o sendo usadas no ajuste (seno, cosseno e constante). Por exemplo, se quiser ajustar um polin√¥mio de segundo grau, pode adicionar fun√ß√µes como lambda x: x**2 ou outras fun√ß√µes conforme necess√°rio.
# Alterar os dados de entrada: Basta modificar os vetores x e y para outros valores experimentais ou fun√ß√µes.
# Alterar a t√©cnica de resolu√ß√£o do sistema: Se preferir outro m√©todo de solu√ß√£o para o sistema linear, basta alterar a chamada √† fun√ß√£o resolver_sistema_LU.
# Esse c√≥digo aplica o m√©todo de m√≠nimos quadrados para ajustar uma curva aos dados fornecidos. A principal vantagem dessa abordagem √© que ela encontra o melhor modelo linear (ou em termos das fun√ß√µes base fornecidas) que minimiza a soma dos quadrados dos erros.

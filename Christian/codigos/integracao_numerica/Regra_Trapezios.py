import numpy as np  # Importa a biblioteca NumPy, que √© √∫til para opera√ß√µes matem√°ticas, como a fun√ß√£o logaritmo

def calcular_area_trapezio(x0: float, x1: float, num_intervalos: int, funcao) -> float:
    """
    Calcula a √°rea sob a curva definida por `funcao` no intervalo [x0, x1]
    utilizando a regra do trap√©zio com `num_intervalos` subintervalos.
    
    A regra do trap√©zio √© um m√©todo num√©rico de aproxima√ß√£o de integrais. Ele basicamente aproxima a √°rea sob a
    curva de uma fun√ß√£o usando trap√©zios (ao inv√©s de usar ret√¢ngulos como na regra dos ret√¢ngulos).

    Par√¢metros:
    x0 (float): Limite inferior do intervalo.
    x1 (float): Limite superior do intervalo.
    num_intervalos (int): N√∫mero de subintervalos. O n√∫mero de subintervalos deve ser inteiro e maior que 0.
    funcao (callable): Fun√ß√£o a ser integrada. Esta fun√ß√£o deve aceitar um valor num√©rico e retornar um valor num√©rico.

    Retorna:
    float: Aproxima√ß√£o da integral no intervalo dado. Caso `num_intervalos` seja menor ou igual a zero, retorna `None`.
    """
    
    # Verifica se o n√∫mero de subintervalos √© v√°lido (deve ser maior que 0)
    if num_intervalos <= 0:
        print("Erro: O n√∫mero de subintervalos deve ser maior que zero.")
        return None  # Retorna None em caso de erro
    
    # Calcula o tamanho do passo, ou seja, o comprimento de cada subintervalo.
    passo = (x1 - x0) / num_intervalos  # O passo √© a dist√¢ncia entre dois pontos consecutivos no intervalo
    
    # Inicializa a lista de valores da fun√ß√£o nos pontos relevantes.
    # Aqui, come√ßa com o valor de f(x0) e f(x1), depois para os pontos intermedi√°rios (i variando de 1 a num_intervalos-1)
    
    valores_y = [funcao(x0)]  # f(x0) -> valor da fun√ß√£o no limite inferior do intervalo (x0)
    
    # Agora, vamos calcular a fun√ß√£o nos pontos intermedi√°rios (entre x0 e x1).
    # Usamos uma lista de compreens√£o para calcular a fun√ß√£o para cada subintervalo.
    # O coeficiente 2 √© usado para os pontos intermedi√°rios, porque o trap√©zio considera esses pontos duas vezes.
    
    valores_y += [2 * funcao(x0 + i * passo) for i in range(1, num_intervalos)]  # Calcula f(x_i) para 1 <= i <= num_intervalos-1, multiplicado por 2.
    
    # Adiciona o valor de f(x1), que √© o limite superior do intervalo.
    valores_y.append(funcao(x1))  # f(x1) -> valor da fun√ß√£o no limite superior do intervalo (x1)
    
    # Agora que temos todos os valores da fun√ß√£o (incluindo os multiplicados por 2), aplicamos a f√≥rmula do trap√©zio:
    # A f√≥rmula √©: √°rea = (h / 2) * [f(x0) + 2 * (f(x1) + f(x2) + ... + f(xn-1)) + f(xn)]
    # Em termos de c√≥digo: somamos todos os valores da fun√ß√£o e multiplicamos pelo passo/2
    
    area_aproximada = (passo * 0.5) * sum(valores_y)  # A soma de todos os valores √© multiplicada por (h / 2), onde h √© o tamanho do passo
    
    # Retorna a √°rea aproximada sob a curva, que √© a integral num√©rica da fun√ß√£o no intervalo [x0, x1]
    return area_aproximada

def funcao_exemplo(x: float) -> float:
    """
    Exemplo de fun√ß√£o para integra√ß√£o: f(x) = x¬≤ * ln(x) + 1
    Esta √© a fun√ß√£o que ser√° usada para o c√°lculo da integral. Voc√™ pode modificar esta fun√ß√£o para integrar qualquer outra.
    
    Par√¢metros:
    x (float): O valor de entrada em que a fun√ß√£o ser√° avaliada.

    Retorna:
    float: O valor de x¬≤ * ln(x) + 1 para o valor de x fornecido.
    """
    return (x**2) * np.log(x) + 1  # Calcula x¬≤ * ln(x) + 1

if __name__ == "__main__":  # Verifica se o c√≥digo est√° sendo executado diretamente (n√£o importado como m√≥dulo)
    # Exemplo de uso da fun√ß√£o calcular_area_trapezio.
    # Vamos calcular a integral de f(x) = x¬≤ * ln(x) + 1 no intervalo [1.2, 1.4] com 2 subintervalos.
    
    resultado = calcular_area_trapezio(1.2, 1.4, 2, funcao_exemplo)  # Chama a fun√ß√£o com o intervalo [1.2, 1.4] e 2 subintervalos
    
    # Exibe o resultado da √°rea aproximada
    if resultado is not None:  # Verifica se o resultado n√£o √© None (ou seja, se n√£o houve erro)
        print(f"√Årea aproximada: {resultado:.6f}")  # Imprime o valor da √°rea aproximada com 6 casas decimais

      
      
      

# Explica√ß√£o Detalhada
# 1. Fun√ß√£o calcular_area_trapezio
# Essa fun√ß√£o implementa a Regra do Trap√©zio, que √© um m√©todo num√©rico simples e eficiente para aproximar integrais definidas. Ela divide o intervalo em pequenos subintervalos e aproxima a √°rea sob a curva como a soma de √°reas de trap√©zios.

# Par√¢metros:
# x0 e x1: S√£o os limites inferior e superior da integral. Ou seja, a integral ser√° calculada no intervalo 
# [
# ùë•
# 0
# ,
# ùë•
# 1
# ]
# [x 
# 0
# ‚Äã
#  ,x 
# 1
# ‚Äã
#  ].

# num_intervalos: N√∫mero de subintervalos usados para dividir o intervalo 
# [
# ùë•
# 0
# ,
# ùë•
# 1
# ]
# [x 
# 0
# ‚Äã
#  ,x 
# 1
# ‚Äã
#  ]. Quanto maior o n√∫mero de subintervalos, maior a precis√£o da aproxima√ß√£o.

# funcao: A fun√ß√£o a ser integrada. Ela deve aceitar um valor 
# ùë•
# x e retornar o valor de 
# ùëì
# (
# ùë•
# )
# f(x).

# Passo a Passo:
# Verifica√ß√£o do n√∫mero de subintervalos:

# O n√∫mero de subintervalos deve ser maior que zero. Caso contr√°rio, a fun√ß√£o retorna None.
# C√°lculo do passo (passo):

# O passo √© a dist√¢ncia entre dois pontos consecutivos no intervalo 
# [
# ùë•
# 0
# ,
# ùë•
# 1
# ]
# [x 
# 0
# ‚Äã
#  ,x 
# 1
# ‚Äã
#  ]. Ele √© dado pela f√≥rmula \text{passo} = \frac{x_1 - x_0}{\text{num_intervalos}}.
# Avalia√ß√£o da fun√ß√£o nos pontos relevantes:

# A lista valores_y armazena os valores da fun√ß√£o 
# ùëì
# (
# ùë•
# )
# f(x) nos pontos 
# ùë•
# 0
# x 
# 0
# ‚Äã
#  , 
# ùë•
# 1
# x 
# 1
# ‚Äã
#   e nos pontos intermedi√°rios.
# O valor da fun√ß√£o nos pontos intermedi√°rios (aqueles que n√£o s√£o 
# ùë•
# 0
# x 
# 0
# ‚Äã
#   ou 
# ùë•
# 1
# x 
# 1
# ‚Äã
#  ) √© multiplicado por 2, pois a regra do trap√©zio atribui um peso maior a esses pontos.
# C√°lculo da √°rea:

# A f√≥rmula da Regra do Trap√©zio √© aplicada somando os valores de 
# ùëì
# (
# ùë•
# )
# f(x) com seus respectivos coeficientes. Depois, multiplicamos essa soma pelo passo / 2 para obter a √°rea aproximada sob a curva.
# Retorno:

# A fun√ß√£o retorna o valor da √°rea aproximada, que √© a integral num√©rica de 
# ùëì
# (
# ùë•
# )
# f(x) no intervalo 
# [
# ùë•
# 0
# ,
# ùë•
# 1
# ]
# [x 
# 0
# ‚Äã
#  ,x 
# 1
# ‚Äã
#  ].
# 2. Fun√ß√£o funcao_exemplo
# Esta √© uma fun√ß√£o exemplo, que ser√° utilizada para ilustrar o funcionamento do m√©todo. A fun√ß√£o que estamos integrando √© 
# ùëì
# (
# ùë•
# )
# =
# ùë•
# 2
# ln
# ‚Å°
# (
# ùë•
# )
# +
# 1
# f(x)=x 
# 2
#  ln(x)+1, mas voc√™ pode modificar essa fun√ß√£o para calcular a integral de qualquer outra fun√ß√£o matem√°tica.

# Como modificar:
# Se quiser calcular a integral de uma fun√ß√£o diferente, basta mudar o corpo da fun√ß√£o funcao_exemplo. Por exemplo:
# python
# Copiar
# Editar
# def funcao(x: float) -> float:
#     return x**3 - 2*x + 4  # Exemplo de outra fun√ß√£o
# 3. Como Usar o C√≥digo
# Passo 1: Defina a fun√ß√£o que deseja integrar. A fun√ß√£o deve aceitar um valor e retornar o valor de 
# ùëì
# (
# ùë•
# )
# f(x).
# Passo 2: Chame a fun√ß√£o calcular_area_trapezio com os par√¢metros desejados: limites 
# ùë•
# 0
# x 
# 0
# ‚Äã
#  , 
# ùë•
# 1
# x 
# 1
# ‚Äã
#  , n√∫mero de subintervalos, e a fun√ß√£o a ser integrada.
# Exemplo:

# python
# Copiar
# Editar
# resultado = calcular_area_trapezio(1.2, 1.4, 2, funcao_exemplo)
# Isso calcular√° a integral de 
# ùëì
# (
# ùë•
# )
# f(x) no intervalo de 1.2 a 1.4 usando 2 subintervalos.

# Considera√ß√µes Finais:
# Precis√£o: A precis√£o do m√©todo depende do n√∫mero de subintervalos. Quanto maior o n√∫mero de subintervalos, mais precisa ser√° a aproxima√ß√£o. No entanto, aumentar o n√∫mero de subintervalos pode tornar o c√°lculo mais demorado.

# Extrapola√ß√£o: Se voc√™ precisa de uma precis√£o muito alta, pode ser interessante usar m√©todos mais avan√ßados ou aumentar o n√∫mero de subintervalos, at√© que o erro de aproxima√ß√£o seja suficientemente pequeno.

import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
from scipy.interpolate import CubicSpline

# Função para calcular a derivada de um spline
def derivative_spline(x_points, y_points, x_vals):
    cs = CubicSpline(x_points, y_points, bc_type='natural')  # Spline cúbica com condições naturais
    return cs.derivative()(x_vals)

# Função para calcular a integral do spline
def integral_spline(x_points, y_points, a, b):
    cs = CubicSpline(x_points, y_points, bc_type='natural')  # Spline cúbica com condições naturais
    return cs.integrate(a, b)

# Função para resolver o problema exponencial
def exponential_problem(x_points, y_points, x_vals):
    # Ajustar um spline cúbico e calcular para os valores de x
    cs = CubicSpline(x_points, y_points, bc_type='natural')
    return cs(x_vals)

# Função para a interpolação Spline
def spline_interpolation(x_points, y_points, x_vals):
    cs = CubicSpline(x_points, y_points, bc_type='natural')  # Spline cúbica com condições naturais
    return cs(x_vals)

# Função para realizar a interpolação inversa (aproximação de x para um dado y)
def inverse_interpolation(x_points, y_points, y_val):
    # Gerar o spline cúbico
    cs = CubicSpline(x_points, y_points, bc_type='natural')
    
    # Resolver a equação cs(x) = y_val, ou seja, x = cs^-1(y_val)
    x_vals = np.array([sp.symbols('x')])
    equation = cs(x_vals) - y_val
    solution = sp.solve(equation, x_vals)
    
    real_solutions = [sol.evalf() for sol in solution if sol.is_real]
    return real_solutions

# Função principal que executa a interpolação e outras operações
def main():
    try:
        # Solicitar a entrada dos pontos ao usuário
        n_points = int(input("Quantos pontos você quer fornecer para a interpolação? "))
        x_points = []
        y_points = []

        for i in range(n_points):
            x_i = float(input(f"Informe o valor x{i}: "))
            y_i = float(input(f"Informe o valor y{i} (f(x{i})): "))
            x_points.append(x_i)
            y_points.append(y_i)

        # Solicitar ao usuário qual operação ele deseja realizar
        print("\nEscolha a operação que você deseja realizar com a interpolação:")
        print("1. Interpolação Spline")
        print("2. Derivada do polinômio spline")
        print("3. Integral do polinômio spline")
        print("4. Resolver problema exponencial")
        print("5. Interpolação Inversa")
        operation = int(input("Escolha uma operação (1/2/3/4/5): "))

        # Calcular a interpolação ou operação solicitada
        if operation == 1:
            x_vals = np.linspace(min(x_points), max(x_points), 100)  # Intervalo para plotagem
            y_vals = spline_interpolation(x_points, y_points, x_vals)
            
            # Plotar a interpolação
            plt.plot(x_vals, y_vals, label="Spline Interpolador")
            plt.scatter(x_points, y_points, color='red', label="Pontos dados")
            plt.legend()
            plt.title("Interpolação Spline")
            plt.xlabel("x")
            plt.ylabel("f(x)")
            plt.grid(True)
            plt.show()

        elif operation == 2:
            x_vals = [float(input("Informe o valor de x para calcular a derivada: "))]
            derivative_vals = derivative_spline(x_points, y_points, x_vals)
            print(f"A derivada do spline nos pontos fornecidos é: {derivative_vals}")

        elif operation == 3:
            a = float(input("Informe o limite inferior da integral: "))
            b = float(input("Informe o limite superior da integral: "))
            integral_value = integral_spline(x_points, y_points, a, b)
            print(f"A integral do spline no intervalo [{a}, {b}] é: {integral_value}")

        elif operation == 4:
            x_vals = [float(input("Informe o valor de x para calcular a função exponencial: "))]
            exp_vals = exponential_problem(x_points, y_points, x_vals)
            print(f"Os valores calculados pelo spline exponencial são: {exp_vals}")

        elif operation == 5:
            y_val = float(input("Informe o valor de f(x) para encontrar x (Interpolação Inversa): "))
            solutions = inverse_interpolation(x_points, y_points, y_val)
            if solutions:
                print(f"As soluções para f(x) = {y_val} são: {solutions}")
            else:
                print("Não foi possível encontrar soluções para a interpolação inversa.")

        else:
            print("Operação inválida. Saindo...")
            return

    except Exception as e:
        print(f"Ocorreu um erro durante o processo: {e}")
        print("Tentando novamente...")
        main()

if __name__ == "__main__":
    main()

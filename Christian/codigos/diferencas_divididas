import numpy as np

def diferenças_divididas(x, y):
    """
    Calcula a tabela de diferenças divididas para o método de Newton.
    
    :param x: Lista de pontos x (valores independentes).
    :param y: Lista de valores de f(x) (valores dependentes).
    :return: Tabela de diferenças divididas.
    """
    n = len(x)
    tabela = np.zeros((n, n))
    tabela[:, 0] = y  # A primeira coluna é apenas os valores de y.

    # Calculando as diferenças divididas
    for j in range(1, n):
        for i in range(n - j):
            tabela[i, j] = (tabela[i + 1, j - 1] - tabela[i, j - 1]) / (x[i + j] - x[i])

    return tabela

def interpolacao_newton(x, tabela, valor):
    """
    Interpola o valor de uma função usando o método de Newton.
    
    :param x: Lista de pontos x.
    :param tabela: Tabela de diferenças divididas.
    :param valor: Valor de x no qual queremos calcular a interpolação.
    :return: Valor interpolado.
    """
    n = len(x)
    resultado = tabela[0, 0]
    produto = 1

    for i in range(1, n):
        produto *= (valor - x[i - 1])
        resultado += tabela[0, i] * produto

    return resultado

def obter_entrada():
    """
    Função para obter a entrada do usuário para os pontos de interpolação.
    """
    try:
        n = int(input("Digite o número de pontos de interpolação: "))
        if n < 2:
            raise ValueError("O número de pontos deve ser maior que 1.")
        
        x = []
        y = []

        for i in range(n):
            xi = float(input(f"Digite o valor x{i + 1}: "))
            yi = float(input(f"Digite o valor y{i + 1}: "))
            x.append(xi)
            y.append(yi)
        
        valor_interpolacao = float(input("Digite o valor de x para interpolação: "))
        return x, y, valor_interpolacao
    except ValueError as ve:
        print(f"Erro na entrada de dados: {ve}")
        return None

def tentar_solucao():
    """
    Função que tenta calcular a interpolação usando diferenças divididas e informa se não foi possível.
    """
    dados_entrada = obter_entrada()
    if dados_entrada is None:
        print("Tentativa falhou. Por favor, tente novamente com valores válidos.")
        return
    
    x, y, valor_interpolacao = dados_entrada

    # Tentativas de resolver
    try:
        tabela = diferenças_divididas(x, y)
        resultado = interpolacao_newton(x, tabela, valor_interpolacao)
        print(f"O valor interpolado para x = {valor_interpolacao} é: {resultado}")
    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        print("Não foi possível resolver o problema com este método.")

# Tentativas automáticas com máximo de tentativas
tentativas_maximas = 5
tentativas = 0

while tentativas < tentativas_maximas:
    print(f"\nTentativa {tentativas + 1} de {tentativas_maximas}...")
    tentar_solucao()
    tentativas += 1
    resposta = input("Deseja tentar novamente? (s/n): ")
    if resposta.lower() != 's':
        print("Saindo...")
        break

if tentativas == tentativas_maximas:
    print("Limite de tentativas atingido. Não foi possível resolver o problema com esse método.")
